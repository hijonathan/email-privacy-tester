// Generated by CoffeeScript 1.4.0
(function() {
  var app, coffee, conf, express, fs, less, routes_main, sendCacheHeaders, server, util;

  coffee = require('coffee-script');

  express = require('express');

  fs = require('fs');

  less = require('less');

  util = require('util');

  routes_main = require('./routes/index');

  conf = require("" + __dirname + "/conf/main.conf");

  app = module.exports = express();

  app.configure(function() {
    var item, k, v, _i, _len, _ref, _ref1, _results;
    app.engine('eco', function(path, options, fn) {
      return fs.readFile(path, 'utf8', function(err, inner_eco) {
        if (err) {
          return fn(err);
        }
        return fs.readFile(path.replace(/^(.+)\/.*/, '$1/layout.eco'), 'utf8', function(err, outer_eco) {
          var html;
          if (err) {
            return fn(err);
          }
          html = require('eco').render(inner_eco + outer_eco, options);
          return fn(null, html);
        });
      });
    });
    _ref = {
      'views': "" + __dirname + "/views",
      'view engine': 'eco',
      'view options': {
        layout: true
      }
    };
    for (k in _ref) {
      v = _ref[k];
      app.set(k, v);
    }
    _ref1 = [
      express.bodyParser(), express.cookieParser(), express.methodOverride(), app.router, express["static"]("" + __dirname + "/public", {
        maxAge: 3600 * 1000
      })
    ];
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      item = _ref1[_i];
      _results.push(app.use(item));
    }
    return _results;
  });

  app.configure('development', function() {
    var item, _i, _len, _ref, _results;
    _ref = [
      express.logger(), express.errorHandler({
        dumpExceptions: true,
        showStack: true
      })
    ];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      _results.push(app.use(item));
    }
    return _results;
  });

  app.configure('production', function() {
    var item, _i, _len, _ref, _results;
    _ref = [express.logger(), app.use(express.errorHandler())];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      _results.push(app.use(item));
    }
    return _results;
  });

  app.get(/.\/$/, function(req, res) {
    return res.redirect(302, req.url.replace(/^(.+)\/$/, '$1'));
  });

  app.get(/^\/(test|about|privacy|optout)?$/, function(req, res) {
    var view;
    view = req.url.replace('/', '').replace(/\?.*/, '');
    if (view.length === 0) {
      view = 'index';
    }
    return routes_main[view](req, res);
  });

  app.post('/', routes_main.submit);

  app.post('/optout', routes_main.optout);

  app.get("/test/:name", routes_main.test);

  sendCacheHeaders = function(res, seconds) {
    res.set('Cache-Control', "max-age=" + seconds + ", public");
    return res.set('Expires', new Date(Date.now() + seconds * 1000).toUTCString());
  };

  server = app.listen(process.env.PORT);

  if (server.address()) {
    console.log("Express server listening on port %d in %s mode", server.address().port, app.settings.env);
  } else {
    console.log("Failed to bind to port");
    process.exit(1);
  }

}).call(this);
