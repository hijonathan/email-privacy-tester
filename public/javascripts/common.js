// Generated by CoffeeScript 1.4.0
(function() {
  var Email;

  Email = {
    validate: function(email) {
      return this.toASCII(email).match(".+@([a-zA-Z0-9]([-a-zA-Z0-9]*[a-zA-Z0-9])?\\.)*[a-zA-Z]{2,}$");
    },
    validateInput: function($input, e) {
      var email, email2;
      email = $input.val();
      if (email === '') {
        $input.removeClass('bad');
        if (e) {
          return e.preventDefault();
        }
      } else if (this.validate(email)) {
        email2 = this.toUnicode(email);
        if (email2 !== email) {
          $input.val(email2);
        }
        return $input.removeClass('bad');
      } else {
        $input.addClass('bad');
        if (e != null) {
          return e.preventDefault();
        }
      }
    },
    toUnicode: function(email) {
      var domain, local_part;
      if (!email.match(/.@./)) {
        return email;
      }
      local_part = email.replace(/(.+)@.+/, '$1');
      domain = punycode.toUnicode(email.replace(/.+@/, ''));
      return "" + local_part + "@" + domain;
    },
    toASCII: function(email) {
      var domain, local_part;
      if (!email.match(/.@./)) {
        return email;
      }
      local_part = email.replace(/(.+)@.+/, '$1');
      domain = punycode.toASCII(email.replace(/.+@/, ''));
      return "" + local_part + "@" + domain;
    }
  };

  if ((typeof history !== "undefined" && history !== null ? history.replaceState : void 0) != null) {
    history.replaceState({}, $('head > title').text(), document.location.pathname);
  }

  if (window === top) {
    $(document).ready(function() {
      return $('input.text,input.email').select().focus();
    });
  }

  $('.view').on('blur', 'input.email', function(e) {
    return Email.validateInput($(this));
  });

  $('.view').on('submit', 'form', function(e) {
    return $(this).find('input.email').each(function() {
      return Email.validateInput($(this), e);
    });
  });

  if ((typeof console !== "undefined" && console !== null ? console.log : void 0) != null) {
    $(document).ready(function() {
      var reqStartResStart;
      try {
        reqStartResStart = window.performance.timing.responseStart - window.performance.timing.requestStart;
        return console.log("From request start to response start: " + (reqStartResStart / 1000) + " seconds");
      } catch (e) {

      }
    });
  }

}).call(this);
