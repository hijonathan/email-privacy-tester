// Generated by CoffeeScript 1.4.0
(function() {
  var Email, clientTimeDifference, email, hasTransitionSupport, humanAge, minHumanAge, runWhenVisible,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  $('#email_status .status').fadeIn();

  clientTimeDifference = 0;

  (function() {
    var client_time, server_time, _ref, _ref1;
    server_time = $('#system_time').remove().text();
    client_time = ((_ref = window.performance) != null ? (_ref1 = _ref.timing) != null ? _ref1.responseStart : void 0 : void 0) || new Date().getTime();
    return clientTimeDifference = client_time - server_time;
  })();

  humanAge = function(t) {
    var hour, min, now, parts, sec, time;
    now = new Date().getTime() - clientTimeDifference;
    sec = parseInt((now - parseInt(t)) / 1000);
    hour = parseInt(sec / 3600);
    sec -= hour * 3600;
    min = parseInt(sec / 60);
    sec -= min * 60;
    parts = [];
    if (hour) {
      parts.push("" + hour + " hour" + (hour === 1 ? '' : 's'));
    }
    if (hour || min) {
      parts.push("" + min + " minute" + (min === 1 ? '' : 's'));
    }
    parts.push("" + sec + " second" + (sec === 1 ? '' : 's'));
    time = new Date(t).toTimeString().replace(/:\d\d .+/, '');
    return ("" + time + " - ") + parts.join(', ') + ' ago';
  };

  minHumanAge = function(t) {
    var hour, min, now, sec;
    now = new Date().getTime() - clientTimeDifference;
    sec = parseInt((now - parseInt(t)) / 1000);
    hour = parseInt(sec / 3600);
    sec -= hour * 3600;
    min = parseInt(sec / 60);
    sec -= min * 60;
    if (hour) {
      return "" + hour + "h:" + min + "m:" + sec + "s";
    } else if (min) {
      return "" + min + "m:" + sec + "s";
    } else {
      return "" + sec + "s";
    }
  };

  $('html,body').animate({
    scrollTop: $('#email_status').position().top - 10
  }, 500);

  runWhenVisible = function(func) {
    return func();
  };

  (function() {
    var e, h, _ref, _ref1, _ref2, _ref3, _ref4;
    _ref = [], h = _ref[0], e = _ref[1];
    if (document.hidden != null) {
      _ref1 = ['hidden', 'visibilitychange'], h = _ref1[0], e = _ref1[1];
    } else if (document.mozHidden != null) {
      _ref2 = ['mozHidden', 'mozvisibilitychange'], h = _ref2[0], e = _ref2[1];
    } else if (document.msHidden != null) {
      _ref3 = ['msHidden', 'msvisibilitychange'], h = _ref3[0], e = _ref3[1];
    } else if (document.webkitHidden != null) {
      _ref4 = ['webkitHidden', 'webkitvisibilitychange'], h = _ref4[0], e = _ref4[1];
    }
    if (h != null) {
      return runWhenVisible = function(func) {
        var wrap;
        if (!document[h]) {
          return func();
        }
        wrap = function() {
          if (document[h]) {
            return;
          }
          $(document).off(e, wrap);
          return func();
        };
        return $(document).on(e, wrap);
      };
    }
  })();

  hasTransitionSupport = false;

  (function() {
    var prefix, style, _i, _len, _ref, _results;
    style = document.createElement('div').style;
    _ref = ['', 'Webkit', 'Moz', 'Ms', 'O'];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      prefix = _ref[_i];
      if (style["" + prefix + "Transition"] != null) {
        _results.push(hasTransitionSupport = true);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  })();

  Email = (function() {

    function Email(callback) {
      var key, lookup_code, repeat, val, _ref, _ref1, _ref2,
        _this = this;
      lookup_code = document.location.pathname.replace(/.*\//, '');
      _ref = [{}, {}], this._data = _ref[0], this._events = _ref[1];
      _ref1 = $('#data').data();
      for (key in _ref1) {
        val = _ref1[key];
        this.set(key, val);
      }
      (function() {
        var timer;
        timer = function() {
          $('.minHumanAge').each(function() {
            return $(this).text(minHumanAge($(this).data('time')));
          });
          $('.humanAge').each(function() {
            return $(this).text(humanAge($(this).data('time')));
          });
          return setTimeout(function() {
            return runWhenVisible(timer);
          }, 1000);
        };
        timer();
        return setTimeout(timer, 1000);
      })();
      if (((_ref2 = this.get('status')) != null ? _ref2.status : void 0) !== 'rejected') {
        repeat = function() {
          return runWhenVisible(function() {
            var xhr;
            xhr = $.ajax({
              url: "" + document.location.pathname + "/ajax/" + (_this.get('emailLogId')) + "/" + (_this.get('callbackId')),
              dataType: 'json',
              async: true,
              cache: false,
              global: false,
              timeout: 35000
            });
            xhr.done(function(data) {
              var _ref3;
              if (data.emailLogId != null) {
                _this.set('emailLogId', data.emailLogId);
              }
              if (data.callbackId != null) {
                _this.set('callbackId', data.callbackId);
              }
              if (data.emailStatus != null) {
                _this.setEmailStatus(data.emailStatus);
              }
              if (data.hits != null) {
                _this.newHits(data.hits);
              }
              if (((_ref3 = data.emailStatus) != null ? _ref3.status : void 0) === 'rejected') {
                return;
              }
              return repeat();
            });
            return xhr.fail(function() {
              return setTimeout(repeat, 1500);
            });
          });
        };
        repeat();
      }
    }

    Email.prototype.on = function(event, callback) {
      event = event.toLowerCase();
      if (this._events[event] == null) {
        this._events[event] = [];
      }
      return this._events[event].push(callback);
    };

    Email.prototype.triggerEvent = function(event, args) {
      var ev, _i, _len, _ref, _results;
      event = event.toLowerCase();
      if (event in this._events) {
        _ref = this._events[event];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          ev = _ref[_i];
          _results.push(ev(args));
        }
        return _results;
      }
    };

    Email.prototype.setEmailStatus = function(status) {
      this.set('status', status);
      return this.triggerEvent('emailstatus');
    };

    Email.prototype.newHits = function(hits) {
      return this.triggerEvent('newhits', hits);
    };

    Email.prototype.addUA = function(ua) {
      var uas;
      uas = this.get('clientUAs');
      if ((ua != null) && __indexOf.call(uas, ua) < 0) {
        uas.push(ua);
        $('#clientUAs').append($('<li/>').text(ua));
        this.set('clientUAs', uas);
        return $('#testMeta').removeClass('hidden');
      }
    };

    Email.prototype.addIP = function(ip) {
      var ips;
      ips = this.get('clientIPs');
      if ((ip != null) && __indexOf.call(ips, ip) < 0) {
        ips.push(ip);
        $('#clientIPs').append($('<li/>').text(ip));
        return $('#testMeta').removeClass('hidden');
      }
    };

    Email.prototype.test = function(k) {
      return this._data.tests[k];
    };

    Email.prototype.get = function(k) {
      return this._data[k.toLowerCase()];
    };

    Email.prototype.set = function(k, v) {
      return this._data[k.toLowerCase()] = v;
    };

    return Email;

  })();

  email = new Email();

  email.on('emailstatus', function() {
    var c, status, _i, _len, _ref;
    status = email.get('status');
    if (status == null) {
      return;
    }
    if (!$('#email_status').hasClass(status.status)) {
      _ref = ['queued', 'rejected', 'sent'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        $('#email_status').removeClass(c);
      }
      $('#email_status').addClass(status.status);
    }
    $('#email_status .status').text(status.status);
    $('#email_status .message').text(status.message);
    if (status.mtimeAge) {
      return $('#email_status .mtime').text(humanAge(status.mtime)).data('time', status.mtime);
    }
  });

  email.on('newhits', function(tests) {
    var $testHits, anchor, container, hit, hits, info, ip, name, x, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
    $testHits = $('#testHits');
    _ref = ((function() {
      var _results;
      _results = [];
      for (x in tests) {
        _results.push(x);
      }
      return _results;
    })()).reverse();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      name = _ref[_i];
      hits = tests[name];
      info = email.test(name);
      for (_j = 0, _len1 = hits.length; _j < _len1; _j++) {
        hit = hits[_j];
        email.addUA(hit.httpUserAgent);
        email.addIP(hit.clientIP);
        _ref1 = hit.httpXForwardedFor || [];
        for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
          ip = _ref1[_k];
          email.addIP(ip);
        }
      }
      container = $("#test_" + name);
      if (container.size() && !container.hasClass('nohit')) {
        container.remove().addClass('flash');
        container.find('span').text(hits[0].ctimeAge).data('time', hits[0].ctime);
        $testHits.prepend(container, ' ');
      } else {
        container.remove();
        container = $('<div/>').addClass('flash');
        container.attr({
          id: "test_" + name
        });
        anchor = $('<a/>').attr('href', "test/" + name).text(info.shortDesc);
        anchor.append($('<br/>'));
        anchor.append($('<span/>').text(hits[0].ctimeAge).data('time', hits[0].ctime).addClass('minHumanAge'));
        container.append(anchor);
        $testHits.prepend(container, ' ');
      }
    }
    return setTimeout(function() {
      var _results;
      _results = [];
      for (name in tests) {
        _results.push($("#test_" + name).removeClass('flash'));
      }
      return _results;
    }, hasTransitionSupport ? 1 : 300);
  });

}).call(this);
