// Generated by CoffeeScript 1.4.0
(function() {
  var authoriseSending, clientIP, conf, emailRate, ept_email, getSalt, ipRate, optedOut, pg, removePlusAddressing, sendCacheHeaders, sendHTML, sendJSON, submit, tests, util;

  util = require('util');

  pg = require('pg');

  ept_email = require('ept/email');

  tests = require('ept/tests');

  conf = require("" + __dirname + "/../conf/main.conf");

  exports.index = function(req, res) {
    return sendHTML(res, 'index');
  };

  exports.about = function(req, res) {
    return sendHTML(res, 'about');
  };

  exports.privacy = function(req, res) {
    return sendHTML(res, 'privacy');
  };

  exports.test = function(req, res) {
    return tests.get(req.params.name, function(test) {
      if (test != null) {
        return sendHTML(res, 'test', {
          test: test
        });
      } else {
        return sendHTML(res, 'test', {
          status: 404
        });
      }
    });
  };

  exports.submit = function(req, res) {
    var client_ip, email, _ref;
    email = ept_email.emailToUnicode(((_ref = req.body) != null ? _ref.email : void 0) || '');
    email = email.replace(/[\r\n]+/g, '');
    email = email.replace(/^\s*(.*?)\s*$/, '$1');
    client_ip = clientIP(req);
    return submit(email, client_ip, function(info) {
      if (info.error != null) {
        return sendHTML(res, 'index', {
          email: email,
          error: info.error
        });
      } else {
        console.log("Email sent to " + email + ", lookup code: " + info.lookup_code);
        return res.redirect(302, "" + conf.site.path + info.lookup_code);
      }
    });
  };

  exports.optout = function(req, res) {
    var data, email, _ref, _ref1;
    data = {};
    if ((_ref = req.body) != null ? _ref.email : void 0) {
      email = ept_email.emailToUnicode(req.body.email);
      email = email.replace(" ", "+");
      return optedOut(email, function(status) {
        var salt, sql;
        if (status) {
          return sendHTML(res, 'optout', {
            email: email,
            success: true
          });
        }
        if (ept_email.validateFormat(email)) {
          salt = getSalt();
          sql = 'INSERT INTO optout SET ctime=?, client_ip=?, salt=?, salted_email_hash=MD5(CONCAT(?,LOWER(?)))';
          return pg.connect(process.env.DATABASE_URL, function(err, client) {
            return client.query(sql, [Date.now(), clientIP(req), salt, salt, removePlusAddressing(email)], function(err, info) {
              if (err != null) {
                return sendHTML(res, 'optout', {
                  email: email,
                  error: "System error: Problem inserting into database"
                });
              } else {
                return sendHTML(res, 'optout', {
                  email: email,
                  success: true
                });
              }
            });
          });
        } else {
          return sendHTML(res, 'optout', {
            email: email,
            error: "Invalid email address"
          });
        }
      });
    } else if ((_ref1 = req.query) != null ? _ref1.email : void 0) {
      return sendHTML(res, 'optout', {
        email: ept_email.emailToUnicode(req.query.email).replace(" ", "+")
      });
    } else {
      return sendHTML(res, 'optout');
    }
  };

  submit = function(email, client_ip, cb) {
    return authoriseSending(email, client_ip, function(err) {
      var domain, local_part, salt, sql;
      if (err != null) {
        return cb({
          error: err
        });
      }
      local_part = email.replace(/^(.+)@.+/, '$1');
      domain = email.replace(/.+@/, '');
      salt = getSalt();
      sql = 'INSERT INTO email SET salt=?, salted_email_hash=MD5(CONCAT(?,LOWER(?))), client_ip=?, callback_code=SUBSTRING(MD5(RAND()),3,16), lookup_code=SUBSTRING(MD5(RAND()),3,16), ctime=?';
      return pg.connect(process.env.DATABASE_URL, function(err, client) {
        return client.query(sql, [salt, salt, removePlusAddressing("" + local_part + "@" + domain), client_ip, Date.now()], function(err, info) {
          if (err != null) {
            return cb({
              error: "System error. Please try again"
            });
          } else {
            return client.query('SELECT lookup_code, callback_code FROM email WHERE email_id=?', [info.insertId], function(err, info) {
              if (err != null) {
                return cb({
                  error: "System error. Please try again"
                });
              } else {
                info = info[0];
                return ept_email.sendEmail({
                  base_domain: conf.site.domain,
                  base_url: "" + conf.site.proto + "://" + conf.site.domain + conf.site.path,
                  ip: client_ip,
                  callback_code: info.callback_code,
                  lookup_code: info.lookup_code,
                  to: email
                }, function(err, status) {
                  if (err != null) {
                    return cb({
                      error: err
                    });
                  } else {
                    return cb({
                      lookup_code: info.lookup_code
                    });
                  }
                });
              }
            });
          }
        });
      });
    });
  };

  clientIP = function(req) {
    var client_ip;
    client_ip = req.socket.remoteAddress;
    if (client_ip === '127.0.0.1') {
      client_ip = (req.get('x-forwarded-for') || '').replace(/.*,\s*/, '');
    }
    return client_ip;
  };

  sendHTML = function(res, name, obj) {
    if ((obj != null ? obj.conf : void 0) == null) {
      if (obj != null) {
        obj.conf = conf;
      }
    }
    res.charset = 'UTF-8';
    res.set('Content-Type', 'text/html');
    return res.render(name, obj);
  };

  sendJSON = function(res, obj) {
    res.charset = 'UTF-8';
    res.set('Content-Type', 'application/json');
    return res.end(JSON.stringify(obj));
  };

  sendCacheHeaders = function(res, seconds) {
    res.set('Cache-Control', "max-age=" + seconds + ", public");
    return res.set('Expires', new Date(Date.now() + seconds * 1000).toUTCString());
  };

  getSalt = function() {
    var salt, saltChars, x, _i;
    salt = '';
    saltChars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYS1234567890'.split('');
    for (x = _i = 1; _i <= 40; x = ++_i) {
      salt += saltChars[parseInt(Math.random() * saltChars.length)];
    }
    return salt;
  };

  authoriseSending = function(email, client_ip, cb) {
    var countdown, done, _ref;
    _ref = [false, 4], done = _ref[0], countdown = _ref[1];
    ept_email.validate(email, function(err) {
      if (done) {
        return;
      }
      if (err != null) {
        cb(err);
        return done = true;
      } else if (--countdown === 0) {
        return cb();
      }
    });
    optedOut(email, function(status) {
      if (done) {
        return;
      }
      if (status) {
        cb('That address has opted out of receiving emails from this system');
        return done = true;
      } else if (--countdown === 0) {
        return cb();
      }
    });
    emailRate(email, function(counter) {
      if (done) {
        return;
      }
      if (counter >= conf.ratelimit.email) {
        cb('You have reached the maximum number of emails to that address for this period');
        return done = true;
      } else if (--countdown === 0) {
        return cb();
      }
    });
    return ipRate(client_ip, function(counter) {
      if (done) {
        return;
      }
      if (counter >= conf.ratelimit.ip) {
        cb('You have hit the maximum number of emails for your IP address for this period');
        return done = true;
      } else if (--countdown === 0) {
        return cb();
      }
    });
  };

  optedOut = function(email, cb) {
    console.log(JSON.stringify(process.env));
    return pg.connect(process.env.DATABASE_URL, function(err, client) {
      var sql;
      sql = 'SELECT ctime FROM optout WHERE salted_email_hash=MD5(CONCAT(salt,LOWER(?))) LIMIT 1';
      return client.query(sql, [ept_email.emailToUnicode(removePlusAddressing(email))], function(err, info) {
        if ((info != null) && info.length === 1) {
          return cb(true);
        }
        return cb(false);
      });
    });
  };

  emailRate = function(email, cb) {
    var domain, local_part;
    if (!email.match(/.@./)) {
      return cb(0);
    }
    local_part = email.replace(/(.+)@.+/, '$1');
    domain = email.replace(/.+@/, '');
    return pg.connect(process.env.DATABASE_URL, function(err, client) {
      var sql;
      sql = 'SELECT COUNT(*) AS counter FROM email WHERE salted_email_hash=MD5(CONCAT(salt,LOWER(?))) AND ctime > ?';
      return client.query(sql, [removePlusAddressing("" + local_part + "@" + domain), Date.now() - 86400000], function(err, info) {
        return cb(err != null ? 0 : info[0].counter);
      });
    });
  };

  ipRate = function(ip, cb) {
    return pg.connect(process.env.DATABASE_URL, function(err, client) {
      var sql;
      sql = 'SELECT COUNT(*) AS counter FROM email WHERE client_ip=? AND ctime > ?';
      return client.query(sql, [ip, Date.now() - 86400000], function(err, info) {
        return cb(err != null ? 0 : info[0].counter);
      });
    });
  };

  removePlusAddressing = function(email) {
    var capture;
    capture = email.match(/^(.+)(?:\+.*)@((?:gmail|googlemail)\.com)$/i);
    if (capture != null) {
      return "" + capture[1] + "@" + capture[2];
    } else {
      return email;
    }
  };

}).call(this);
