// Generated by CoffeeScript 1.4.0
(function() {
  var cache, cache_timeout, conf, domain_rx, in_rx, punycode, tailer, util, watch, web_callback,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  conf = require("" + __dirname + "/../conf/main.conf");

  tailer = require('tailfd');

  punycode = require('punycode');

  util = require('util');

  domain_rx = punycode.toASCII(conf.site.domain).replace(/\./g, '\\.');

  in_rx = new RegExp("^(\\S+ \\S+) .*: client (\\S+?)#\\d+: query: ([a-zA-Z0-9]+)\\.(anchor|link)-test\\.ept\\." + domain_rx + " IN A(?:AAA)? ");

  cache = {};

  cache_timeout = 3600000;

  watch = function() {
    return tailer.tail(conf.dns.bind, {
      start: 0,
      timeout: 60000,
      timeoutInterval: 10000
    }, function(line) {
      var cacheKey, callbackCode, capture, clientIP, k, mtime, testName, v;
      capture = in_rx.exec(line);
      if (capture == null) {
        return;
      }
      mtime = new Date(capture[1]).getTime();
      clientIP = capture[2];
      callbackCode = capture[3];
      testName = "dns_" + capture[4];
      if (__indexOf.call(conf.dns.ignore, clientIP) >= 0) {
        return;
      }
      for (k in cache) {
        v = cache[k];
        if (v < Date.now() - cache_timeout) {
          delete cache[k];
        }
      }
      cacheKey = "" + clientIP + " " + callbackCode + " " + testName + " " + (parseInt(mtime / 1000));
      if (cache[cacheKey] != null) {
        return;
      }
      cache[cacheKey] = Date.now();
      return web_callback(callbackCode, testName, {
        ctime: mtime,
        clientIP: clientIP
      }, function(success) {
        if (success) {
          return console.log("" + (new Date(mtime)) + " " + testName + " - " + clientIP);
        } else {
          return delete cache[cacheKey];
        }
      });
    });
  };

  web_callback = function(callback_code, test_name, data, cb) {
    var http, opt, req;
    data = JSON.stringify(data);
    opt = {
      host: conf.site.domain,
      path: "" + conf.site.path + "cb/" + callback_code + "/" + test_name,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': data.length
      }
    };
    http = require(conf.site.proto);
    req = http.request(opt, function(res) {
      if (res.statusCode === 200) {
        return cb(true);
      } else {
        return cb(false);
      }
    });
    req.on('error', function(e) {
      return cb(false);
    });
    req.write(data);
    return req.end();
  };

  watch();

}).call(this);
