// Generated by CoffeeScript 1.4.0
(function() {
  var MailParser, callback_code, conf, email_type, mail_parse, web_callback, _ref;

  conf = require("" + __dirname + "/../conf/main.conf");

  MailParser = require('mailparser').MailParser;

  _ref = [], email_type = _ref[0], callback_code = _ref[1];

  (function() {
    var match, rx;
    rx = new RegExp("^(?:(env|from|rt|rr|dn)\.)([a-f0-9]{16})$");
    match = rx.exec(process.argv[2]);
    if (match) {
      email_type = {
        env: 'sender',
        from: 'from',
        rt: 'reply_to',
        rr: 'return_receipt',
        dn: 'disposition_notification'
      }[match[1] || ''];
      return callback_code = match[2];
    } else {
      console.error("Unable to determine which email this is in reply to");
      return process.exit(1);
    }
  })();

  (function() {
    var plain, truncateAt;
    truncateAt = 102400;
    plain = '';
    process.stdin.resume();
    process.stdin.on('data', function(chunk) {
      if (plain.length === truncateAt) {
        return;
      }
      plain += chunk;
      if (plain.length > truncateAt) {
        return plain = plain.substr(0, truncateAt);
      }
    });
    return process.stdin.on('end', function() {
      return mail_parse(plain, function(emailData) {
        return web_callback(callback_code, email_type, {
          ctime: Date.now(),
          emailData: emailData
        }, function(success) {
          return process.exit(0);
        });
      });
    });
  })();

  web_callback = function(callback_code, test_name, data, cb) {
    var http, opt, req;
    data = JSON.stringify(data);
    opt = {
      host: conf.site.domain,
      path: "" + conf.site.path + "cb/" + callback_code + "/" + test_name,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': data.length
      }
    };
    http = require(conf.site.proto);
    req = http.request(opt, function(res) {
      if (res.statusCode === 200) {
        return cb(true);
      } else {
        return cb(false);
      }
    });
    req.on('error', function(e) {
      return cb(false);
    });
    req.write(data);
    return req.end();
  };

  mail_parse = function(email, callback) {
    var mailParser;
    email = email.replace(/^From [^\n]+\n/, '');
    mailParser = new MailParser();
    mailParser.write(email);
    mailParser.end();
    return mailParser.on('end', function(mail) {
      var collect;
      if ((mail != null ? mail.subject : void 0) == null) {
        return;
      }
      collect = {
        subject: mail.subject
      };
      if (mail.headers.from != null) {
        collect.from = mail.headers.from;
      }
      if (mail.text != null) {
        collect.body = mail.text.substr(0, 255).replace(/[\r\n]+$/, '');
      }
      if (Date.parse(mail.headers.date)) {
        collect.date = Date.parse(mail.headers.date);
      }
      return callback(collect);
    });
  };

}).call(this);
