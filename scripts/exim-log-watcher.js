// Generated by CoffeeScript 1.4.0
(function() {
  var conf, defer_rx, domain_rx, in_rx, markEmailQueued, markEmailRejected, markEmailSent, other_rx, out_rx, punycode, reject_rx, tailer, util, watch, web_callback;

  conf = require("" + __dirname + "/../conf/main.conf");

  tailer = require('tailfd');

  punycode = require('punycode');

  util = require('util');

  domain_rx = punycode.toASCII(conf.site.domain).replace(/\./g, '\\.');

  in_rx = new RegExp("^\\S+ \\S+ (\\S+) <= env\\.([a-f0-9]{16})\\.cb@" + domain_rx + " ");

  out_rx = new RegExp("^(\\S+ \\S+) (\\S+) => \\S+ .+? H=(\\S+) \\[(\\S+)\\]:25(?: .+)*? C=\"(.+?)\"");

  defer_rx = new RegExp("^(\\S+ \\S+) (\\S+) == \\S+ .+? T=\\S+ defer \\(\\S+\\): (.+)");

  reject_rx = new RegExp("^(\\S+ \\S+) (\\S+) \\*\\* \\S+ .+? T=\\S+: (.+)");

  other_rx = new RegExp("^(\\S+ \\S+) (\\S+) ([^-=<].+)");

  watch = function() {
    var codes;
    codes = {};
    return tailer.tail('/var/log/exim4/mainlog', {
      start: 0,
      timeout: 60000,
      timeoutInterval: 10000
    }, function(line) {
      var callbackCode, hostIp, hostName, match, message, messageId, mtime;
      match = in_rx.exec(line);
      if (match != null) {
        messageId = match[1];
        callbackCode = match[2];
        return codes[messageId] = callbackCode;
      }
      match = out_rx.exec(line);
      if (match != null) {
        mtime = new Date(match[1]).getTime();
        messageId = match[2];
        hostName = match[3];
        hostIp = match[4];
        message = match[5];
        callbackCode = codes[messageId];
        if (callbackCode == null) {
          return;
        }
        delete codes[messageId];
        return markEmailSent(callbackCode, mtime, "Message accepted by " + hostName + " (" + hostIp + ") - " + message);
      }
      match = defer_rx.exec(line);
      if (match != null) {
        mtime = new Date(match[1]).getTime();
        messageId = match[2];
        message = match[3];
        callbackCode = codes[messageId];
        if (callbackCode == null) {
          return;
        }
        return markEmailQueued(callbackCode, mtime, message);
      }
      match = reject_rx.exec(line);
      if (match != null) {
        mtime = new Date(match[1]).getTime();
        messageId = match[2];
        message = match[3];
        callbackCode = codes[messageId];
        if (callbackCode == null) {
          return;
        }
        delete codes[messageId];
        return markEmailRejected(callbackCode, mtime, message);
      }
      match = other_rx.exec(line);
      if (match != null) {
        mtime = new Date(match[1]).getTime();
        messageId = match[2];
        message = match[3];
        callbackCode = codes[messageId];
        if (callbackCode == null) {
          return;
        }
        return markEmailQueued(callbackCode, mtime, message);
      }
    });
  };

  markEmailSent = function(callbackCode, mtime, message) {
    return web_callback(callbackCode, {
      status: 'sent',
      mtime: mtime,
      message: message
    }, function(success) {
      if (success) {
        return console.log("" + (new Date(mtime)) + " Sent " + callbackCode + " - " + message);
      }
    });
  };

  markEmailRejected = function(callbackCode, mtime, message) {
    return web_callback(callbackCode, {
      status: 'rejected',
      mtime: mtime,
      message: message
    }, function(success) {
      if (success) {
        return console.log("" + (new Date(mtime)) + " Rejected " + callbackCode + " - " + message);
      }
    });
  };

  markEmailQueued = function(callbackCode, mtime, message) {
    if (message === 'Completed') {
      return;
    }
    if (message === 'Connection refused') {
      return;
    }
    if (message.indexOf('Spool file is locked ') === 0) {
      return;
    }
    return web_callback(callbackCode, {
      status: 'queued',
      mtime: mtime,
      message: message
    }, function(success) {
      if (success) {
        return console.log("" + (new Date(mtime)) + " Queued " + callbackCode + " - " + message);
      }
    });
  };

  web_callback = function(callbackCode, data, cb) {
    var http, opt, req;
    data = JSON.stringify(data);
    opt = {
      host: conf.site.domain,
      path: "" + conf.site.path + "emailStatusCB/" + callbackCode,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': data.length
      }
    };
    http = require(conf.site.proto);
    req = http.request(opt, function(res) {
      if (res.statusCode === 200) {
        return cb(true);
      } else {
        return cb(false);
      }
    });
    req.on('error', function(e) {
      return cb(false);
    });
    req.write(data);
    return req.end();
  };

  watch();

}).call(this);
